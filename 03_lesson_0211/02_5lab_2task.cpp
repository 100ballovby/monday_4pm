#include <iostream>

using namespace std;

void lab5_task2_5() {
    /** Дана целочисленная прямоугольная
    матрица. Определить количество столбцов,
     содержащих хотя бы один нулевой элемент;
     номер строки, в которой находится самая
     длинная серия одинаковых элементов.  **/
    const int n = 4;
    const int m = 5;
    int matrix[n][m] = {
            {0,  5, 9,  2, 1},
            {9, 5, 12, 6, 8},
            {7,  7, 0, 77, 7},
            {4, 9, 2, 2, 7}
    };
    int col = 0;
    for (int str = 0; str < n; str++) {
        for (int el = 0; el < m; el++) {
            if (matrix[el][str] == 0) {
                col++;
                break;
            }
        }
    }
    cout << "Количество столбцов с 0: " << col << endl;

    int max_equal_row = 0;  // номер строки c одинаковыми элементами
    int max_count = 0; // количество одинаковых  элементов в строке
    int element = -1;  // сюда запишем элемент, который повторяется
    for (int str = 0; str < n; str++) {
        int curr_count = 0;  // считаем количество одинаковых
        int curr_element = matrix[str][0];
        // в качестве элемента для сравнения берем первый элемент строки
        for (int el = 1; el < m; el++) {
            if (curr_element == matrix[str][el]) {  // если элемент, который сравниваем совпадает с чем-то в строке
                curr_count++;  // увеличиваю количество одинаковых на 1
            } else {
                if (max_count < curr_count) {
                    // если мы посчитали количество одинаковых и оно оказалось больше, чем изначальное количество одинаковых
                    max_equal_row = str;  // поменять индекс строки с наибольшим количеством повторов на номер текущей строки
                    max_count = curr_count;  // количество повторяющийхся элементов заменяю на количество повторяющихся элементов в текущей строке
                    element = curr_element;  // элемент, который повторяется, заменяются на повторяющийся элемент в этой строке
                }
                curr_element = matrix[str][el];  // перепрыгиваю на следующую строку
                curr_count = 0;  // обнуляю счетчик одинаковых элементов для текущей строки
            }

        }
    }
    cout << "Line number: " << max_equal_row + 1 << endl;
    cout << "Element: " << element << endl;

}